/** filepath: station1/index.html **/
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Station 1 - Twine App</title>
    <!-- Include your preferred Twine stylesheet: 
         For SugarCube you might have a file like sugarcube.css -->
    <link rel="stylesheet" type="text/css" href="sugarcube.css" />
  </head>
  <body>
    <div id="story">
      <!-- Basic Twine story data -->
      <tw-storydata
        name="Station1Story"
        startnode="1"
        creator="Twine"
        creator-version="2.x"
        ifid="example-id"
      >
        <tw-passagedata pid="1" name="Start">
          Welcome to Station 1. Click below to ask the AI a question.<br />
          <button onclick="callAI()">Ask AI</button>
          <div id="ai-response" style="margin-top: 1em; color: blue"></div>
        </tw-passagedata>
      </tw-storydata>
    </div>
    <script>
      function callAI() {
        fetch("http://localhost:3000/ai", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ message: "Who are you?" }),
        })
          .then((response) => response.json())
          .then((data) => {
            document.getElementById("ai-response").innerHTML =
              data.reply || "No reply";
          })
          .catch((err) => {
            console.error("Error:", err);
            document.getElementById("ai-response").innerHTML =
              "Error contacting AI.";
          });
      }
    </script>
  </body>
</html>
/** filepath: station2/index.html **/
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Station 2 - Twine App</title>
    <link rel="stylesheet" type="text/css" href="sugarcube.css" />
  </head>
  <body>
    <div id="story">
      <!-- Basic Twine story data for Station 2 -->
      <tw-storydata
        name="Station2Story"
        startnode="1"
        creator="Twine"
        creator-version="2.x"
        ifid="example-id-2"
      >
        <tw-passagedata pid="1" name="Start">
          Welcome to Station 2. Click below to request your symbolic map from
          the AI.<br />
          <button onclick="callAI()">Generate Map</button>
          <div id="ai-response" style="margin-top: 1em; color: green"></div>
        </tw-passagedata>
      </tw-storydata>
    </div>
    <script>
      function callAI() {
        fetch("http://localhost:3000/ai", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ message: "Generate my map" }),
        })
          .then((response) => response.json())
          .then((data) => {
            document.getElementById("ai-response").innerHTML =
              data.reply || "No reply";
          })
          .catch((err) => {
            console.error("Error:", err);
            document.getElementById("ai-response").innerHTML =
              "Error contacting AI.";
          });
      }
    </script>
  </body>
</html>
/** filepath: db/index.js **/
// File: momv/db/index.js

const express = require("express");
const fs = require("fs");
const axios = require("axios");

const app = express();
const port = 3000;
const dbFile = "./data.json";

// Use express.json() to parse incoming JSON bodies
app.use(express.json());

// ---------------------------
// Database Endpoints
// ---------------------------

// GET endpoint to retrieve stored data
app.get("/data", (req, res) => {
    fs.readFile(dbFile, "utf-8", (err, data) => {
        if (err) return res.status(500).json({ error: "Unable to read database" });
        res.json(JSON.parse(data || "{}"));
    });
});

// POST endpoint to update the stored data
app.post("/data", (req, res) => {
    fs.writeFile(dbFile, JSON.stringify(req.body), err => {
        if (err) return res.status(500).json({ error: "Unable to write to database" });
        res.json({ status: "success" });
    });
});

// ---------------------------
// AI Proxy Endpoint
// ---------------------------
app.post("/ai", async (req, res) => {
    const { message } = req.body;

    try {
        // Replace with your actual API key and ensure it's exported as an environment variable:
        // e.g., export DASHSCOPE_API_KEY=sk-xxx in your shell environment.
        const apiKey = process.env.DASHSCOPE_API_KEY;

        // Call the Qwen API using axios
        const response = await axios.post(
            "https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions",
            {
                model: "qwen-plus",
                messages: [
                    { role: "system", content: "You are a helpful assistant." },
                    { role: "user", content: message }
                ]
            },
            {
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${apiKey}`
                }
            }
        );

        // Extract the reply from the response and return it
        const reply =
            response.data?.choices && response.data.choices[0].message?.content ||
            "No reply received";
        res.json({ reply });
    } catch (error) {
        console.error("Error calling AI API:", error.message);
        res.json({ reply: "Simulated response: I am the AI, but an error occurred." });
    }
});

// Start the server
app.listen(port, () => {
    console.log(`DB/AI server running at http://localhost:${port}`);
});
