/**
 * Type definitions for the story retriever system
 * This file documents the data structures used throughout the story modules
 */

/**
 * Represents a single story block, the basic unit of story content
 */
export interface StoryBlock {
  /** Unique identifier for the block */
  id: string;
  
  /** The type of block - determines how it's rendered and processed */
  type: StoryBlockType;
  
  /** Optional scene identifier - groups blocks into scenes */
  sceneId?: number;
  
  // Type-specific properties
  
  /** Title for scene-header blocks */
  titleName?: string;
  
  /** Text content for plain blocks */
  text?: string;
  
  /** Available options for static and dynamic-option blocks */
  options?: string[];
  
  /** Number of sentences for dynamic-text blocks */
  sentenceCount?: number;
  
  /** Custom name for a dynamic block */
  blockName?: string;
  
  /** AI prompt for dynamic blocks */
  prompt?: string;
  
  /** Flag to determine if the dynamic block should generate options */
  generateOptions?: boolean;
  
  /** Context references for dynamic blocks */
  context?: ContextReference[];
  
  /** Player-specific choice data (added at runtime) */
  playerChoice?: PlayerChoice;
  
  /** Dynamic content generated by AI (added at runtime) */
  dynamicContent?: string;
}

/**
 * All possible block types in the story system
 */
export type StoryBlockType = 
  | 'scene-header'  // Scene title/heading
  | 'plain'         // Regular text content
  | 'static'        // Fixed set of options for player to choose
  | 'dynamic';      // Universal AI-generated content (text or options based on generateOptions flag)

/**
 * Player's choice for a specific block
 */
export interface PlayerChoice {
  /** Index of the chosen option */
  chosenIndex: number;
  
  /** Text of the chosen option */
  chosenText: string;
  
  /** All available options (especially for dynamic options) */
  availableOptions?: string[];
}

/**
 * Reference to context from another block
 */
export interface ContextReference {
  /** ID of the referenced block */
  value: string;
  
  /** Whether to include all players' choices for this block */
  includeAll?: boolean;
}

/**
 * Complete story data containing all blocks
 */
export interface StoryData {
  /** Array of all blocks in the story */
  blocks: StoryBlock[];
}

/**
 * Dynamic content generated by AI and stored in the database
 */
export interface DynamicContent {
  /** The type of block this content is for */
  blockType: string;
  
  /** The generated content */
  content: string;
  
  /** When the content was generated */
  timestamp: string;
}

/**
 * Player data structure as stored in the database
 */
export interface PlayerData {
  /** Player's choices for each block ID */
  choices: {
    [blockId: string]: {
      blockType: string;
      availableOptions: string[];
      chosenIndex: number;
      chosenText: string;
      instruction?: string;
      contextBlocks?: any[];
      timestamp: string;
    }
  };
  
  /** Dynamic content generated for each block ID */
  dynamicContent: {
    [blockId: string]: DynamicContent;
  };
  
  /** Player's codename data */
  codename?: {
    displayName: string;
    components: string[];
    timestamp: string;
  };
}

/**
 * Database structure for the story system
 */
export interface DBData {
  /** All player data indexed by player ID */
  players: {
    [playerId: string]: PlayerData;
  };
  
  /** Other block-related data */
  blocks: any[];
}

/**
 * Options for filtering blocks
 */
export interface BlockFilterOptions {
  /** If specified, get blocks up to this block ID */
  blockId?: string | null;
  
  /** If specified, only get blocks of this type */
  blockType?: string | null;
}

/**
 * Context for rendering blocks into text
 */
export interface RenderContext {
  /** ID of the player whose data to use */
  playerId?: string;
  
  /** Current compiled text (for tracking newlines etc.) */
  compiledText: string;
}

/**
 * Block renderer function signature
 */
export type BlockRenderer = (block: StoryBlock, context: RenderContext) => string;

/**
 * Collection of renderer functions for each block type
 */
export interface BlockRenderers {
  [blockType: string]: BlockRenderer;
}